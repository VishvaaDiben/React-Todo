{"version":3,"sources":["components/login.js","components/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Login","useState","user","setUser","className","onSubmit","e","preventDefault","console","log","type","placeholder","value","required","to","Todo","todo","index","completeTodo","removeTodo","updateTodoAtIndex","style","textDecoration","isCompleted","id","text","onChange","onClick","icon","TodoForm","addTodo","setValue","target","infinite","Button","variant","library","add","faTrash","faCheck","Dashboard","todos","setTodos","newTodos","splice","getCompletedLength","filter","length","state","labels","datasets","label","backgroundColor","hoverBackgroundColor","data","showWarn","setShowWarn","showInfo","setShowInfo","href","CardDeck","Card","Body","Text","a","y","i","x","slice","push","z","undefined","join","getLastThreeItems","height","width","options","maintainAspectRatio","legend","display","position","map","Header","key","Title","Alert","onClose","dismissible","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a018ac1.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\n// import axios from \"axios\";\r\n\r\n  function Login() {\r\n  const [user, setUser] = useState(false);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    setUser(true);\r\n\r\n    console.log(user);\r\n  }\r\n\r\n  const userId = \"ffad8bfc00374ad9\";\r\n\r\n  // render() {\r\n    return (\r\n      // <Container fluid>\r\n      <div className=\"auth-wrapper\">\r\n        <div className=\"auth-inner\">\r\n          <form onSubmit={handleSubmit}>\r\n            <h3>Login</h3>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Id\"\r\n                 value={userId}\r\n                // onChange={this.handleChange}\r\n                // required\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Name\"\r\n                // value={this.state.name}\r\n                // onChange={this.handleChange}\r\n                required\r\n              />\r\n            </div>\r\n\r\n            <Link to=\"/dashboard\">\r\n              <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n              Login\r\n              </button>\r\n            </Link>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      // </Container>\r\n    );\r\n  }\r\n// }\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faTrash, faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport { MDBAnimation } from \"mdbreact\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nlibrary.add(faTrash, faCheck);\r\n\r\nfunction Todo({ todo, index, completeTodo, removeTodo, updateTodoAtIndex }) {\r\n  return (\r\n\r\n    <div\r\n      className=\"todo\"\r\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        id={index}\r\n        value={todo.text}\r\n        onChange={(e) => updateTodoAtIndex(e, index)}\r\n      />\r\n\r\n      <div>\r\n        <button onClick={() => completeTodo(index)}>\r\n          <span>\r\n            <FontAwesomeIcon className=\"faicons\" icon=\"check\" />\r\n          </span>\r\n        </button>\r\n        <button onClick={() => removeTodo(index)}>\r\n          <span>\r\n            <FontAwesomeIcon className=\"faicons\" icon=\"trash\" />\r\n          </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TodoForm({ addTodo }) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!value) return;\r\n    addTodo(value);\r\n    setValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {/* <div> */}\r\n      <input\r\n        type=\"text\"\r\n        className=\"input\"\r\n        value={value}\r\n        onChange={(e) => setValue(e.target.value)}\r\n      />\r\n      <span>\r\n        <MDBAnimation type=\"pulse\" infinite>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Add New Task\r\n          </Button>\r\n        </MDBAnimation>\r\n      </span>\r\n      {/* </div> */}\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction Dashboard() {\r\n  const [todos, setTodos] = useState([\r\n    {\r\n      text: \"Learn about React\",\r\n      isCompleted: false,\r\n    },\r\n    {\r\n      text: \"Meet friend for lunch\",\r\n      isCompleted: false,\r\n    },\r\n    {\r\n      text: \"Build really cool todo app\",\r\n      isCompleted: false,\r\n    },\r\n  ]);\r\n\r\n  const addTodo = (text) => {\r\n    const newTodos = [...todos, { text }];\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const completeTodo = (index) => {\r\n    const newTodos = [...todos];\r\n    newTodos[index].isCompleted = true;\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const removeTodo = (index) => {\r\n    const newTodos = [...todos];\r\n    newTodos.splice(index, 1);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  function updateTodoAtIndex(e, index) {\r\n    const newTodos = [...todos];\r\n    newTodos[index].text = e.target.value;\r\n    setTodos(newTodos);\r\n  }\r\n\r\n  function getCompletedLength() {\r\n    return todos.filter((todo) => todo.isCompleted).length;\r\n  }\r\n\r\n  function getUnCompletedLength() {\r\n    return todos.filter((todo) => !todo.isCompleted).length;\r\n  }\r\n\r\n  function getLength() {\r\n    return todos.length;\r\n  }\r\n\r\n  //helper function\r\n  function checkTodoArray(){\r\n    if (todos.length > 0){\r\n      return getLastThreeItems();\r\n    }\r\n    return <p>Null</p>\r\n  }\r\n\r\n  function getLastThreeItems() {\r\n    let a = [];\r\n    let y = [];\r\n    for (var i = 0; i < todos.length; i += 3) {\r\n      let x = todos.slice(i, i + 3);\r\n      y.push(x);\r\n    }\r\n    let z = y[y.length - 1];\r\n\r\n    if (z[2] !== undefined) {\r\n      a.push(z[2].text);\r\n      a.push(z[1].text);\r\n      a.push(z[0].text);\r\n    } else if (z[1] !== undefined) {\r\n      a.push(z[1].text);\r\n      a.push(z[0].text);\r\n    } else a.push(z[0].text);\r\n\r\n    return a.join(\"<br>\");\r\n  }\r\n\r\n  const state = {\r\n    labels: [\"Completed\", \"Uncompleted\"],\r\n    datasets: [\r\n      {\r\n        label: \"Task\",\r\n        backgroundColor: [\"#3fe330\", \"#d6ee16\"],\r\n        hoverBackgroundColor: [\"#107c06\", \"#626d05\"],\r\n        data: [getCompletedLength(), getUnCompletedLength()],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const [showWarn, setShowWarn] = useState(true);\r\n  const [showInfo, setShowInfo] = useState(true);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n          <div className=\"container\">\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\r\n              <ul className=\"navbar-nav ml-auto\">\r\n                <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/sign-in\"> */}\r\n                    <a href=\"/sign-in\"><h1>Logout</h1></a>\r\n                  {/* </Link> */}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      <div className=\"app\">\r\n        {/* <Navbar>\r\n          <Navbar.Brand href=\"#home\">Navbar with text</Navbar.Brand>\r\n          <Navbar.Toggle />\r\n          <Navbar.Collapse className=\"justify-content-end\">\r\n            <Navbar.Text>\r\n              Signed in as: <a href=\"#login\">Mark Otto</a>\r\n            </Navbar.Text>\r\n          </Navbar.Collapse>\r\n        </Navbar> */}\r\n        <CardDeck>\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <MDBAnimation type=\"bounce\">\r\n                  <h1>\r\n                    {getCompletedLength()}/{getLength()}\r\n                  </h1>\r\n                  <h3>completed</h3>\r\n                </MDBAnimation>\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <MDBAnimation type=\"swing\">\r\n                  <h5>Newly added:</h5>\r\n                  <h3>{checkTodoArray()}</h3>\r\n                </MDBAnimation>\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <MDBAnimation type=\"pulse\">\r\n                  <Pie\r\n                    className=\"chart-wrapper\"\r\n                    data={state}\r\n                    height={200}\r\n                    width={400}\r\n                    options={{\r\n                      maintainAspectRatio: false,\r\n                      legend: {\r\n                        display: true,\r\n                        position: \"top\",\r\n                      },\r\n                    }}\r\n                  />\r\n                </MDBAnimation>\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </CardDeck>\r\n        <br />\r\n\r\n        <Card>\r\n          {todos.map((todo, index) => (\r\n            <Card.Header>\r\n              <Todo\r\n                key={index}\r\n                index={index}\r\n                todo={todo}\r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodoAtIndex={updateTodoAtIndex}\r\n              />\r\n            </Card.Header>\r\n          ))}\r\n          <Card.Body>\r\n            <Card.Title></Card.Title>\r\n            <Card.Text>\r\n              <TodoForm addTodo={addTodo} />\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n\r\n        <br />\r\n        {showWarn ? (\r\n          <Alert\r\n            variant=\"warning\"\r\n            onClose={() => setShowWarn(false)}\r\n            dismissible\r\n          >\r\n            Try edit the todolist directly.\r\n          </Alert>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {showInfo ? (\r\n          \r\n          <Alert variant=\"info\" onClose={() => setShowInfo(false)} dismissible>\r\n            More features coming soon, eg. search, modal overlay pop-up & more.\r\n          </Alert>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Login from \"./components/login\";\nimport Dashboard from \"./components/dashboard\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/sign-in\" component={Login} />\n        <Route exact path=\"/\" component={Login} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n   <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}